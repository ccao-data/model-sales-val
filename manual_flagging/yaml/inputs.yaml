# This is a config file that is used for run specifications of the
# local flagging script.
---
# manual_update: A boolean setting to control flag updates. If set
# to "false", it initializes a new set of flags with each assigned
# a version number of "1". If set to "true", the script increments
# the version number by 1 for existing flags in sales; for sales
# without flags, it assigns a version number of "1". The latest
# version of each sale flag can be found in the "default"."vw_pin_sale" view.

manual_update: true

# The values in housing_market_type, run_tri, and tri_stat_groups will tell the
# sales val script which properties will be updated. The housing_market_type
# list supports 'res_single_family', 'res_multi_family', and/or 'condos'.
# The run_tri van be 1, 2, and/or 3, and the values for the tri_stat_groups
# can be "current" or "og_mansueto".

# 'tri_stat_groups' specifies which flagging methodology will be used for
# which tri

# Note: If 'og_mansueto' is selected along with either 'res_single_family' or
# 'res_multi_family', it will trigger an update for all residential property
# types ('res_single_family' and 'res_multi_family'). This behavior is
# intrinsic to the 'og_mansueto' script's functionality.

housing_market_type: ["res_single_family", "res_multi_family"]

#TODO/PROBLEMS
# - Need to set a default recurring config that doesn't double flag sales
# - How to prevent double flagging given extreme flexibility.
#   - Manual update should be super specific?
#   - A check before writing the data/user guide in docs?

# First-level values from stat_groups_map goes
# here ("city_tri", "north_tri", etc.)
run_geography: ["city_tri", "north_tri"]

# This config can be used in the potential situation where we need to only
# update x amount of sales where x+n amount of sales are needed for the
# statistical groupings. Should build this so that more than one column
# filter can be used
sales_to_write_filter:
  column:
    values:

# Maybe I can break this up into distinct dicts so that it
# isn't so big, i.e data_filters['city_tri']['res_single_family']
stat_groups_map:
  city_tri:
    data_filter:
      column: "triad_code"
      values: ["1"]
    res_single_family:
      columns:
        - "rolling_window"
        - "geography_split"
        - "bldg_age_bin"
        - "char_bldg_sf_bin"
      data_filter:
        column: "class"
        values: [
          "202",
          "203",
          "204",
          "205",
          "206",
          "207",
          "208",
          "209",
          "210",
          "218",
          "219",
          "234",
          "278",
          "295"
        ]
      iso_forest: "res"
      sf_bin_specification: [1200, 2400]
      age_bin_specification: [40]
    res_multi_family:
      columns:
        - "rolling_window"
        - "geography_split"
        - "bldg_age_bin"
      data_filter:
        column: "class"
        values: ["211", "212"]
      age_bin_specification: [20]
      iso_forest: "res"
    condos:
      columns:
        - "rolling_window"
        - "geography_split"
      data_filter:
        column: "class"
        values: ["297", "299", "399"]
      iso_forest: "condos"
  north_tri:
    data_filter:
      column: "triad_code"
      values: ["2"]
    all_res:
      columns:
        - "rolling_window"
        - "township_code"
        - "class"
      data_filter:
      #TODO change this to something more descriptive in the sql query
        column: "indicator"
        values: "res"
      iso_forest: "res"
    condos:
      columns:
        - "rolling_window"
        - "township_code"
      data_filter:
        column: "indicator"
        values: "res"
      iso_forest: "condos"
  south_tri:
    data_filter:
      column: "triad_code"
      values: ["3"]
    all_res:
      columns:
        - "rolling_window"
        - "township_code"
        - "class"
      data_filter:
        column: "indicator"
        values: "res"
      iso_forest: "res"
    condos:
      columns:
        - "rolling_window"
        - "township_code"
      data_filter:
        column: "indicator"
        values: "condos"


iso_forest:
  res:
    - "meta_sale_price"
    - "sv_price_per_sqft"
    - "sv_days_since_last_transaction"
    - "sv_cgdr"
    - "sv_sale_dup_counts"
  condos: [
    "meta_sale_price",
    "sv_days_since_last_transaction",
    "sv_cgdr",
    "sv_sale_dup_counts"
  ]

# These are the price standard deviation bounds that the sales must exceed
# to be classified as an outlier
dev_bounds: [2, 2]

# 'start' and 'end' determine which sales will be written to the
# sale.flag table. Leave 'end' blank if we want to flag all sales
# since the start date
time_frame:
  start: "2020-01-01"
  end:

# How many total months to include in the grouping methodology
rolling_window_months: 12

# PTAX flags are only kept if the raw or sqft price is at least this
# many standard deviations away from the mean
ptax_sd: [1, 1]

# Flags are only applied if there are at least this many sales in the group
min_groups_threshold: 30
