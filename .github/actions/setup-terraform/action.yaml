---
name: Setup Terraform
description: Install and configure Terraform and AWS for the correct environment
inputs:
  role-to-assume:
    description: AWS IAM role to assume when running Terraform operations.
    required: true
  tfvars-vile:
    description: File to store Terraform variables.
    required: false
    default: terraform.tfvars
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: us-east-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Initialize Terraform
      run: terraform init
      shell: bash

    - name: Determine Terraform workspace and set variables
      id: determine-workspace
      run: |
        echo "iam_role_arn = \"$IAM_ROLE_ARN\"" > "$TFVARS_FILE"
        # # GITHUB_HEAD_REF is only set on pull_request events, so if it's
        # present, we must be in a PR context
        if [ -n "$GITHUB_HEAD_REF" ]; then
          echo "On pull request branch, setting terraform env to CI"
          echo "workspace=$GITHUB_HEAD_REF" >> "$GITHUB_OUTPUT"
          echo "commit_sha = \"$GITHUB_HEAD_REF\"" >> "$TFVARS_FILE"
        elif [[ $GITHUB_REF_NAME == 'main' ]]; then
          echo "On master branch, setting terraform env to prod"
          echo "workspace=prod" >> "$GITHUB_OUTPUT"
          echo "commit_sha = \"$(printf %.6s $GITHUB_SHA)\"" >> "$TFVARS_FILE"
        else
          echo "CI context did not match any of the expected environments"
          exit 1
        fi
      shell: bash
      env:
        IAM_ROLE_ARN: ${{ secrets.TERRAFORM_IAM_ROLE_ARN }}
        TFVARS_FILE: ${{ inputs.tfvars-file }}

    - name: Select Terraform workspace
      run: terraform workspace select "$WORKSPACE"
      shell: bash
      env:
        WORKSPACE: ${{ steps.determine-workspace.outputs.workspace }}
