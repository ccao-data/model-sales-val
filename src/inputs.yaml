# This is a config file that is used for run specifications of the
# local flagging script.
---
# Note included with each run. Use this to summarize what changed about the run
# or add context
run_note: |


# manual_update: A boolean setting to control flag updates. If set
# to "false", it initializes a new set of flags with each assigned
# a version number of "1". If set to "true", the script increments
# the version number by 1 for existing flags in sales; for sales
# without flags, it assigns a version number of "1". The latest
# version of each sale flag can be found in the "default"."vw_pin_sale" view.
manual_update: false

# manual_update_only_new_sales: A boolean that only is in play when
# manual_update = true. If true, the sales val pipeline will only
# flag sales that currently have no existing flag in the sale.flag
# table. In other words, it will flag unseen sales, not sales that
# the sales val model has already given a flag value to.
manual_update_only_new_sales: true

# "housing_market_type" and "run_tri" configurations determine the
# specificity of flagging. First, we retrieve the run tris, then run
# the flags on those tris for each selected market type, but only if
# the market type is present in the "stat groups" config under the
# "tri$n" value.
housing_market_type: [
  "res_single_family",
  "res_multi_family",
  "res_all",
  "condos"
]
run_tri: [1, 2, 3]

# "sales_to_write" filter allows further specificity. Here we can decide
# which flags we want to write at a more precise level than market type
# and tri. For example, we could add "class" as the column value and
# "["208"]" to the values value. Note: values must be a list
sales_to_write_filter:
  column:
  values:

# This config object defines the columns that are used to produce statistical
# groupings for different housing market types in different tris. The choice to
# define this config as a tri-based hierarchy (tri > housing market > columns)
# is based on the assumption that the eographies we use for grouping columns
# will be defined as neighborhoods, townships, or groups of
# neighborhoods/townships, such that each statistical group nests neatly into a
# tri and a housing market; if this assumption ever changes, we will need to
# redesign this config to support it.
stat_groups:
  tri1:
    res_single_family:
      columns:
        - "rolling_window"
        - "geography_split"
        - column: "char_bldg_age"
          bins: [40]
        - column: "char_bldg_sf"
          bins: [1200, 2400]
    res_multi_family:
      columns:
        - "rolling_window"
        - "geography_split"
        - column: "char_bldg_age"
          bins: [20]
    condos:
      columns:
        - "rolling_window"
        - "geography_split"
  tri2:
    res_all:
      columns:
        - "rolling_window"
        - "township_code"
        - "class"
    condos:
      columns:
        - "rolling_window"
        - "township_code"
  tri3:
    res_all:
      columns:
        - "rolling_window"
        - "township_code"
        - "class"
    condos:
      columns:
        - "rolling_window"
        - "township_code"

iso_forest:
  res:
    - "meta_sale_price"
    - "sv_price_per_sqft"
    - "sv_days_since_last_transaction"
    - "sv_cgdr"
    - "sv_sale_dup_counts"
  condos: [
    "meta_sale_price",
    "sv_days_since_last_transaction",
    "sv_cgdr",
    "sv_sale_dup_counts"
  ]

housing_market_class_codes:
  res_single_family: [
    "202",
    "203",
    "204",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "218",
    "219",
    "234",
    "278",
    "295"
  ]
  res_multi_family: ["211", "212"]
  condos: ["297", "299", "399"]
  res_all: [
    "202",
    "203",
    "204",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "211",
    "212",
    "218",
    "219",
    "234",
    "278",
    "295"
  ]

# These are the price standard deviation bounds that the sales must exceed
# to be classified as an outlier
dev_bounds: [2, 2]

# 'start' and 'end' determine which sales will be written to the
# sale.flag table. Leave 'end' blank if we want to flag all sales
# since the start date
time_frame:
  start: "2014-01-01"
  end:

# How many total months to include in the grouping methodology
rolling_window_months: 12

# PTAX flags are only kept if the raw or sqft price is at least this
# many standard deviations away from the mean
ptax_sd: [1, 1]

# Flags are only applied if there are at least this many sales in the group
min_groups_threshold: 30

# This is the raw price threshold that is used to set sales to outlier status
# regardless of group size
raw_price_threshold: 15_000_000
